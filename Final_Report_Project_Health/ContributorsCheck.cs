using Octokit;
using System.Text.RegularExpressions;
//Class to check contributor activity and duplicate emails
//Check Metrics class before for comments on helper functions and reoccurring code
public class ContributorsCheck
{
    public const string Owner = "home-assistant";
    public const string Repo = "core";
    //Cheks if contributor had any activity before a half a year ago
    //Output: 1 if activity found, 0 if not, 2 if user not found (private/deleted)
    public static async Task<int> ActivityBefore(string cont, DateTimeOffset till)
    {
        var basicAuth = new Credentials("TOKEN");
        var Client = new GitHubClient(new ProductHeaderValue("Capstone"));
        Client.Credentials = basicAuth;

        //Check presence of single issue to detect activity before half a year ago
        var Issuequery = new SearchIssuesRequest($"repository:{Owner}/{Repo} author:{cont} is:issue created<{till:yyyy-MM-dd}")
        {
            PerPage = 1,
            Page = 1
        };
        try
        {
            var IssueResult = await WithRateLimitRetry(() => Client.Search.SearchIssues(Issuequery));
            if (IssueResult.TotalCount > 0) return 1;
        }
        //Catch if user has a private or deleted account 
        catch (ApiValidationException)
        {
            Console.WriteLine("Caught commit exception for " + cont);
            return 2;
        }
        //Same for pull requests
        try
        {
            var PRquery = new SearchIssuesRequest($"repository:{Owner}/{Repo} author:{cont} is:pr created<{till:yyyy-MM-dd}")
            {
                PerPage = 1,
                Page = 1
            };
            var PRResult = await WithRateLimitRetry(() => Client.Search.SearchIssues(PRquery));
            if (PRResult.TotalCount > 0) return 1;
        }
        catch (ApiValidationException)
        {
            Console.WriteLine("Caught commit exception for " + cont);
            return 2;
        }
        //Same for commits
        try
        {
            var commq = await WithRateLimitRetry(() => Client.Repository.Commit.GetAll(Owner, Repo, new CommitRequest
            { Author = cont, Until = till }, new ApiOptions { PageSize = 1, PageCount = 1, StartPage = 1 }));
            if (commq.Count > 0) return 1;
        }
        catch (ApiValidationException)
        {
            Console.WriteLine("Caught commit exception for " + cont);
            return 2;
        }
        //If no activity was found return 0
        return 0;
    }
    //Check activity for all contributors in the list and export to CSV
    //Input was a list of all contributors from the involvement score metric in a txt file which was read line by line and passed as an IEnumerable<string>
    public static async Task CheckAllActivity(string path, IEnumerable<string> cont)
    {
        var till = DateTimeOffset.UtcNow.AddDays(-180);
        var uniq = cont.Where(c => !string.IsNullOrWhiteSpace(c)).Select(c => c.Trim()).Distinct(StringComparer.OrdinalIgnoreCase).ToList();
        var rows = new List<ActivityRow>(uniq.Count);
        foreach (var login in uniq)
        {
            var bit = await ActivityBefore(login, till);
            rows.Add(new ActivityRow { Login = login, ActivityBefore180d = bit });
            Console.WriteLine($"Checked {login}: {bit}");
        }
        //Export to CSV so analysis can be done in Excel
        Console.WriteLine("writing csv");
        Metrics.ToCsv(rows, path,
        ("Login", x => x.Login),
        ("ActivityBefore180d", x => x.ActivityBefore180d));
    }

    //Generated by ChatGPT
    public sealed class ActivityRow
    {
        public string Login { get; init; } = "";
        public int ActivityBefore180d { get; init; } // 1,0,2
    }


    public static async Task DuplicateEmails()
    {
        var basicAuth = new Credentials("TOKEN");
        var Client = new GitHubClient(new ProductHeaderValue("Capstone"));
        Client.Credentials = basicAuth;
        //Check commits from last 180 days as I had problems with finding email info from PRs and Issues
        // I know that this might miss some contributors 
        // I awknowledge this shortcomming but due to time constraints I had to limit the scope
        
        var comq = new CommitRequest { Sha = "dev", Since = DateTimeOffset.UtcNow.AddDays(-180) };
        var commits = await Client.Repository.Commit.GetAll(Owner, Repo, comq);
        //Hashset to store email to logins mapping
        var emailToLogins = new Dictionary<string, HashSet<string>>(StringComparer.OrdinalIgnoreCase);

        void Map(string? rawEmail, string? login)
        {
            if (string.IsNullOrWhiteSpace(rawEmail)) return;
            if (IsNoReply(rawEmail)) return;             // skip GitHub noreply addresses
            if (string.IsNullOrWhiteSpace(login)) return;

            var email = NormalizeEmail(rawEmail);
            if (!emailToLogins.TryGetValue(email, out var set))
                emailToLogins[email] = set = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            set.Add(login);
        }


        foreach (var c in commits)
        {
            // Author side
            Map(c.Commit?.Author?.Email, c.Author?.Login);
            // Committer side (merge committers / maintainers / CI often live here)
            Map(c.Commit?.Committer?.Email, c.Committer?.Login);
        }

        var duplicates = emailToLogins
            .Where(kvp => kvp.Value.Count > 1)
            .OrderByDescending(kvp => kvp.Value.Count)
            .ToList();
        //No duplicates were finally found
        if (duplicates.Count == 0)
        {
            Console.WriteLine("No duplicate emails found.");
            return;
        }

        Console.WriteLine("Duplicate emails found:");
        foreach (var kvp in duplicates)
            Console.WriteLine($"  {kvp.Key} <- {string.Join(", ", kvp.Value.OrderBy(s => s))}");
    }

    // Helpers made with the help of ChatGPT
    // Mostly used ChatGPT as exam season was creeping in and I do not have much (if any) experience 
    // with string manipulation and regex in C#
    static bool IsNoReply(string e) =>
    e.EndsWith("@users.noreply.github.com", StringComparison.OrdinalIgnoreCase) || e.EndsWith("noreply@github.com", StringComparison.OrdinalIgnoreCase);

    static string? LoginFromNoReply(string? email)
    {
        if (string.IsNullOrWhiteSpace(email)) return null;
        var m = Regex.Match(email, @"^(?:\d+\+)?(?<login>[^@]+)@users\.noreply\.github\.com$", RegexOptions.IgnoreCase);
        return m.Success ? m.Groups["login"].Value : null;
    }

    static string NormalizeEmail(string email)
    {
        var e = email.Trim().ToLowerInvariant();
        var parts = e.Split('@');
        if (parts.Length != 2) return e;
        var local = parts[0];
        var domain = parts[1];
        var plus = local.IndexOf('+');
        if (plus >= 0) local = local[..plus];
        if (domain is "gmail.com" or "googlemail.com") local = local.Replace(".", "");
        return $"{local}@{domain}";
    }

        //Description in metrics class
        static async Task<T> WithRateLimitRetry<T>(Func<Task<T>> action)
    {
        try { return await action(); }
        catch (RateLimitExceededException ex)
        {
            var delay = ex.Reset - DateTimeOffset.UtcNow + TimeSpan.FromSeconds(1);
            if (delay < TimeSpan.Zero) delay = TimeSpan.FromSeconds(2);
            Console.WriteLine($"Rate limited; sleeping {delay:c} (reset {ex.Reset:u})");
            await Task.Delay(delay);
            return await action();
        }
        catch (AbuseException)
        {
            var delay = TimeSpan.FromSeconds(60);
            Console.WriteLine($"Secondary limit; sleeping {delay:c}");
            await Task.Delay(delay);
            return await action();
        }
    }

}